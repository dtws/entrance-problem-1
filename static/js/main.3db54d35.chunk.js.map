{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","reducer","combineReducers","activeThreadId","state","USERS","id","action","type","threads","map","o","messages","messagesReducer","undefined","threadIndex","findThreadIndex","oldThread","newThread","slice","length","findIndex","t","threadId","find","m","newMessage","text","sender","timestamp","Date","now","uuid","v4","concat","messageIndex","store","createStore","ThreadTabs","connect","tabs","title","active","dispatch","onClick","openThread","props","className","tab","index","key","TextFieldSubmit","input","ref","node","onSubmit","value","MessageList","style","textAlign","src","avatar","moment","format","ReceiverList","selectedItem","items","onSelect","onChange","val","Thread","receiver","this","thread","onMessageClick","onMessageSubmit","e","setState","target","Component","ThreadDisplay","deleteMessage","stateProps","dispatchProps","addMessage","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3db54d35.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","/* eslint-disable no-undef */ /* eslint-disable no-shadow */ /* eslint-disable react/prefer-stateless-function */ /* eslint-disable default-case */ /* eslint-disable consistent-return */ /* eslint-disable no-return-assign */ /* eslint-disable no-unused-vars */ /* eslint-disable react/jsx-no-undef */ // eslint-disable-line max-len\nimport React, {Component} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport \"./style.css\";\nimport 'semantic-ui-css/semantic.min.css';\nimport { createStore, combineReducers } from \"redux\";\nimport {connect, Provider} from \"react-redux\";\nimport uuid from \"uuid\";\nimport moment from \"moment\";\nimport USERS from \"./users.json\";\n\nconst reducer = combineReducers({\n  activeThreadId: activeThreadIdReducer,\n  threads: threadsReducer,\n});\n\nfunction activeThreadIdReducer(state = USERS[0].id, action) {\n  if (action.type === 'OPEN_THREAD') {\n    return action.id;\n  } else {\n    return state;\n  }\n}\n\nfunction findThreadIndex(threads, action) {\n  switch (action.type) {\n    case 'ADD_MESSAGE': {\n      return threads.findIndex(\n        (t) => t.id === action.threadId\n      );\n    }\n    case 'DELETE_MESSAGE': {\n      return threads.findIndex(\n        (t) => t.messages.find((m) => (\n          m.id === action.id\n        ))\n      );\n    }\n  }\n}\n\nfunction threadsReducer(state = USERS.map(o=>{return {...o,messages:messagesReducer(undefined,{})}}), action) {\n  switch (action.type) {\n    case 'ADD_MESSAGE':\n    case 'DELETE_MESSAGE': {\n      const threadIndex = findThreadIndex(state, action);\n\n      const oldThread = state[threadIndex];\n      const newThread = {\n        ...oldThread,\n        messages: messagesReducer(oldThread.messages, action),\n      };\n\n      return [\n        ...state.slice(0, threadIndex),\n        newThread,\n        ...state.slice(\n          threadIndex + 1, state.length\n        ),\n      ];\n    }\n    default: {\n      return state;\n    }\n  }\n}\n\nfunction messagesReducer(state = [], action) {\n  switch (action.type) {\n    case 'ADD_MESSAGE': {\n      const newMessage = {\n        text: action.text,\n        sender: action.sender,\n        timestamp: Date.now(),\n        id: uuid.v4(),\n      };\n      return state.concat(newMessage);\n    }\n    case 'DELETE_MESSAGE': {\n      const messageIndex = state.findIndex((m) => m.id === action.id);\n      return [\n        ...state.slice(0, messageIndex),\n        ...state.slice(\n          messageIndex + 1, state.length\n        ),\n      ];\n    }\n    default: {\n      return state;\n    }\n  }\n}\n\nexport const store = createStore(reducer);\n\nfunction deleteMessage(id) {\n  return {\n    type: 'DELETE_MESSAGE',\n    id: id,\n  };\n}\n\nfunction addMessage(text, sender, receiver) {\n  return {\n    type: 'ADD_MESSAGE',\n    text,\n    sender,\n    threadId: receiver,\n  };\n}\n\nfunction openThread(id) {\n  return {\n    type: 'OPEN_THREAD',\n    id: id,\n  };\n}\n\nconst App = () => (\n  <div className='ui segment'>\n    <ThreadTabs />\n    <ThreadDisplay />\n  </div>\n);\n\nconst Tabs = (props) => (\n  <div className='ui top attached tabular menu'>\n    {\n      props.tabs.map((tab, index) => (\n        <div\n          key={index}\n          className={tab.active ? 'active item' : 'item'}\n          onClick={() => props.onClick(tab.id)}\n        >\n          {tab.title}\n        </div>\n      ))\n    }\n  </div>\n);\n\nconst mapStateToTabsProps = (state) => {\n  const tabs = state.threads.map(t => (\n    {\n      title: t.title,\n      active: t.id === state.activeThreadId,\n      id: t.id,\n    }\n  ));\n\n  return {\n    tabs,\n  };\n};\n\nconst mapDispatchToTabsProps = (dispatch) => (\n  {\n    onClick: (id) => (\n      dispatch(openThread(id))\n    ),\n  }\n);\n\nconst ThreadTabs = connect(\n  mapStateToTabsProps,\n  mapDispatchToTabsProps\n)(Tabs);\n\nconst TextFieldSubmit = (props) => {\n  let input;\n\n  return (\n    <div className='ui input'>\n      <input\n        ref={node => input = node}\n        type='text'\n      >\n      </input>\n      <button\n        onClick={() => {\n          props.onSubmit(input.value);\n          input.value = '';\n        }}\n        className='ui primary button'\n        type='submit'\n      >\n        Submit\n      </button>\n    </div>\n  );\n};\n\nconst MessageList = (props) => (\n  <div className='ui comments' style={{textAlign:\"left\"}}>\n    {\n      props.messages.map((m, index) => {\n        const sender = USERS.find(({id})=>id===m.sender);\n        return (\n          <div\n            className='comment'\n            key={index}\n            onClick={() => props.onClick(m.id)}\n          >\n            <a className=\"avatar\"><img src={sender.avatar}/></a>\n            <div className=\"content\">\n              <a className=\"author\">{sender.title}</a>\n              <div className=\"metadata\"><span className=\"date\">{moment(m.timestamp).format('MMMM Do YYYY, h:mm:ss a')}</span></div>\n              <div className=\"text\"><p>{m.text}</p></div>\n            </div>\n          </div>\n        );\n      })\n\n    }\n  </div>\n);\n\nconst ReceiverList = ({selectedItem, items, onSelect}) => (\n  <select value={selectedItem} onChange={onSelect}>\n    {items.map(({val,key}) => (<option value={key} key={key}>{val}</option>))}\n  </select>\n);\n\nclass Thread extends Component {\n  state = {receiver:USERS[0].id};\n  render() {\n    return (\n      <div className='ui center aligned basic segment'>\n        <MessageList\n          messages={this.props.thread.messages}\n          onClick={this.props.onMessageClick}\n        />\n        <TextFieldSubmit\n          onSubmit={(t)=>this.props.onMessageSubmit(t,this.state.receiver)}\n        />\n        <ReceiverList\n          selectedItem={this.state.receiver}\n          items={USERS.map(({id,title})=>({key:id,val:title}))}\n          onSelect={(e)=>this.setState({receiver:e.target.value})}\n        />\n      </div>\n    );\n  }\n}\n\nconst mapStateToThreadProps = (state) => (\n  {\n    thread: state.threads.find(\n      t => t.id === state.activeThreadId\n    ),\n  }\n);\n\nconst mapDispatchToThreadProps = (dispatch) => (\n  {\n    onMessageClick: (id) => (\n      dispatch(deleteMessage(id))\n    ),\n    dispatch: dispatch,\n  }\n);\n\nconst mergeThreadProps = (stateProps, dispatchProps) => (\n  {\n    ...stateProps,\n    ...dispatchProps,\n    onMessageSubmit: (text,receiver) => (\n      dispatchProps.dispatch(\n        addMessage(text ,stateProps.thread.id, receiver)\n      )\n    ),\n  }\n);\n\nconst ThreadDisplay = connect(\n  mapStateToThreadProps,\n  mapDispatchToThreadProps,\n  mergeThreadProps\n)(Thread);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App, {store} from './App';\nimport {Provider} from \"react-redux\";\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}