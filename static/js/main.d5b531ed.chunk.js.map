{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","reducer","combineReducers","activeThreadId","state","action","type","id","threads","title","messages","messagesReducer","undefined","threadIndex","findThreadIndex","oldThread","newThread","slice","length","findIndex","t","threadId","find","m","newMessage","text","timestamp","Date","now","uuid","v4","concat","messageIndex","store","createStore","ThreadTabs","connect","tabs","map","active","dispatch","onClick","openThread","props","className","tab","index","key","TextFieldSubmit","input","ref","node","onSubmit","value","MessageList","ThreadDisplay","thread","onMessageClick","deleteMessage","stateProps","dispatchProps","onMessageSubmit","addMessage","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d5b531ed.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","/* eslint-disable no-undef */ /* eslint-disable no-shadow */ /* eslint-disable react/prefer-stateless-function */ /* eslint-disable default-case */ /* eslint-disable consistent-return */ /* eslint-disable no-return-assign */ /* eslint-disable no-unused-vars */ /* eslint-disable react/jsx-no-undef */ // eslint-disable-line max-len\nimport React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport \"./style.css\";\nimport { createStore, combineReducers } from \"redux\";\nimport {connect, Provider} from \"react-redux\";\nimport uuid from \"uuid\";\n\nconst reducer = combineReducers({\n  activeThreadId: activeThreadIdReducer,\n  threads: threadsReducer,\n});\n\nfunction activeThreadIdReducer(state = '1-fca2', action) {\n  if (action.type === 'OPEN_THREAD') {\n    return action.id;\n  } else {\n    return state;\n  }\n}\n\nfunction findThreadIndex(threads, action) {\n  switch (action.type) {\n    case 'ADD_MESSAGE': {\n      return threads.findIndex(\n        (t) => t.id === action.threadId\n      );\n    }\n    case 'DELETE_MESSAGE': {\n      return threads.findIndex(\n        (t) => t.messages.find((m) => (\n          m.id === action.id\n        ))\n      );\n    }\n  }\n}\n\nfunction threadsReducer(state = [\n  {\n    id: '1-fca2',\n    title: 'Buzz Aldrin',\n    messages: messagesReducer(undefined, {}),\n  },\n  {\n    id: '2-be91',\n    title: 'Michael Collins',\n    messages: messagesReducer(undefined, {}),\n  },\n], action) {\n  switch (action.type) {\n    case 'ADD_MESSAGE':\n    case 'DELETE_MESSAGE': {\n      const threadIndex = findThreadIndex(state, action);\n\n      const oldThread = state[threadIndex];\n      const newThread = {\n        ...oldThread,\n        messages: messagesReducer(oldThread.messages, action),\n      };\n\n      return [\n        ...state.slice(0, threadIndex),\n        newThread,\n        ...state.slice(\n          threadIndex + 1, state.length\n        ),\n      ];\n    }\n    default: {\n      return state;\n    }\n  }\n}\n\nfunction messagesReducer(state = [], action) {\n  switch (action.type) {\n    case 'ADD_MESSAGE': {\n      const newMessage = {\n        text: action.text,\n        timestamp: Date.now(),\n        id: uuid.v4(),\n      };\n      return state.concat(newMessage);\n    }\n    case 'DELETE_MESSAGE': {\n      const messageIndex = state.findIndex((m) => m.id === action.id);\n      return [\n        ...state.slice(0, messageIndex),\n        ...state.slice(\n          messageIndex + 1, state.length\n        ),\n      ];\n    }\n    default: {\n      return state;\n    }\n  }\n}\n\nexport const store = createStore(reducer);\n\nfunction deleteMessage(id) {\n  return {\n    type: 'DELETE_MESSAGE',\n    id: id,\n  };\n}\n\nfunction addMessage(text, threadId) {\n  return {\n    type: 'ADD_MESSAGE',\n    text: text,\n    threadId: threadId,\n  };\n}\n\nfunction openThread(id) {\n  return {\n    type: 'OPEN_THREAD',\n    id: id,\n  };\n}\n\nconst App = () => (\n  <div className='ui segment'>\n    <ThreadTabs />\n    <ThreadDisplay />\n  </div>\n);\n\nconst Tabs = (props) => (\n  <div className='ui top attached tabular menu'>\n    {\n      props.tabs.map((tab, index) => (\n        <div\n          key={index}\n          className={tab.active ? 'active item' : 'item'}\n          onClick={() => props.onClick(tab.id)}\n        >\n          {tab.title}\n        </div>\n      ))\n    }\n  </div>\n);\n\nconst mapStateToTabsProps = (state) => {\n  const tabs = state.threads.map(t => (\n    {\n      title: t.title,\n      active: t.id === state.activeThreadId,\n      id: t.id,\n    }\n  ));\n\n  return {\n    tabs,\n  };\n};\n\nconst mapDispatchToTabsProps = (dispatch) => (\n  {\n    onClick: (id) => (\n      dispatch(openThread(id))\n    ),\n  }\n);\n\nconst ThreadTabs = connect(\n  mapStateToTabsProps,\n  mapDispatchToTabsProps\n)(Tabs);\n\nconst TextFieldSubmit = (props) => {\n  let input;\n\n  return (\n    <div className='ui input'>\n      <input\n        ref={node => input = node}\n        type='text'\n      >\n      </input>\n      <button\n        onClick={() => {\n          props.onSubmit(input.value);\n          input.value = '';\n        }}\n        className='ui primary button'\n        type='submit'\n      >\n        Submit\n      </button>\n    </div>\n  );\n};\n\nconst MessageList = (props) => (\n  <div className='ui comments'>\n    {\n      props.messages.map((m, index) => (\n        <div\n          className='comment'\n          key={index}\n          onClick={() => props.onClick(m.id)}\n        >\n          <div className='text'>\n            {m.text}\n            <span className='metadata'>@{m.timestamp}</span>\n          </div>\n        </div>\n      ))\n    }\n  </div>\n);\n\nconst Thread = (props) => (\n  <div className='ui center aligned basic segment'>\n    <MessageList\n      messages={props.thread.messages}\n      onClick={props.onMessageClick}\n    />\n    <TextFieldSubmit\n      onSubmit={props.onMessageSubmit}\n    />\n  </div>\n);\n\nconst mapStateToThreadProps = (state) => (\n  {\n    thread: state.threads.find(\n      t => t.id === state.activeThreadId\n    ),\n  }\n);\n\nconst mapDispatchToThreadProps = (dispatch) => (\n  {\n    onMessageClick: (id) => (\n      dispatch(deleteMessage(id))\n    ),\n    dispatch: dispatch,\n  }\n);\n\nconst mergeThreadProps = (stateProps, dispatchProps) => (\n  {\n    ...stateProps,\n    ...dispatchProps,\n    onMessageSubmit: (text) => (\n      dispatchProps.dispatch(\n        addMessage(text, stateProps.thread.id)\n      )\n    ),\n  }\n);\n\nconst ThreadDisplay = connect(\n  mapStateToThreadProps,\n  mapDispatchToThreadProps,\n  mergeThreadProps\n)(Thread);\n\n//ReactDOM.render(\n//  <ReactRedux.Provider store={store}>\n//    <App />\n//  </ReactRedux.Provider>,\n//  document.getElementById('content')\n//);\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App, {store} from './App';\nimport {Provider} from \"react-redux\";\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}